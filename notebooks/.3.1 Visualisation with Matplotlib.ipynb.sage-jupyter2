{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83693568},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"00674c","input":"","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"038e95","input":"","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3ec142","input":"","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b29a26","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c90827","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"8dc281","input":"df_pivot.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Species</th>\n      <th>Iris-setosa</th>\n      <th>Iris-versicolor</th>\n      <th>Iris-virginica</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>5.1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.9</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"Species  Iris-setosa  Iris-versicolor  Iris-virginica\nId                                                   \n1                5.1              NaN             NaN\n2                4.9              NaN             NaN\n3                4.7              NaN             NaN\n4                4.6              NaN             NaN\n5                5.0              NaN             NaN"},"exec_count":10,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"55109a","input":"df['Species'].unique()","output":{"0":{"data":{"text/plain":"array(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], dtype=object)"},"exec_count":11,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"7e37a4","input":"df_setosa = df[df['Species'] == 'Iris-setosa']","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"765665","input":"df_versicolor = df[df['Species'] == 'Iris-versicolor']","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"942b3b","input":"df_virginica = df[df['Species'] == 'Iris-virginica']","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"a17585","input":"plt.scatter(df_setosa['SepalLengthCm'], df_setosa['SepalWidthCm'], c='r')\nplt.scatter(df_versicolor['SepalLengthCm'], df_versicolor['SepalWidthCm'], c='g')\nplt.scatter(df_virginica['SepalLengthCm'], df_virginica['SepalWidthCm'], c='b')","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f83654d4c50>"},"exec_count":15,"output_type":"execute_result"},"1":{"data":{"image/png":"3efbaa2d9eb2fd8897b9b28bbcf733054dce3158","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":250,"width":373},"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"5ff0b7","input":"plt.figure(figsize=(10,8)) # set the size of the plot\n\nplt.scatter(df_setosa['SepalLengthCm'], df_setosa['SepalWidthCm'], c='r')\nplt.scatter(df_versicolor['SepalLengthCm'], df_versicolor['SepalWidthCm'], c='g')\nplt.scatter(df_virginica['SepalLengthCm'], df_virginica['SepalWidthCm'], c='b')\n\nax = plt.gca() #gca method tell the rest of the code to reference the plot we made\n\nax.set_xlabel('Sepal Length (cm)')\nax.set_ylabel('Sepal Width (cm)')\nax.set_title('Sepal Length and Width for Different Iris')\n\nax.legend(('setosa', 'versicolor', 'virginica'))","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f83654b40b8>"},"exec_count":16,"output_type":"execute_result"},"1":{"data":{"image/png":"e5d48cfd5426019ea4e7302ae80739de13bc1acd","text/plain":"<Figure size 720x576 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":494,"width":608},"needs_background":"light"},"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"5b3f6d","input":"plt.figure(figsize=(10,8))\n\nplt.hist(df_setosa['SepalLengthCm'], color='r', alpha=.5) # alpha set the transperancy of the plot\nplt.hist(df_versicolor['SepalLengthCm'], color='g', alpha=.5)\nplt.hist(df_virginica['SepalLengthCm'], color='b', alpha=.5)\n\nax = plt.gca()\n\nax.set_xlabel('Sepal Length (cm)')\nax.set_title('Histrogram of Sepal Length for Different Iris')\n\nax.legend(('setosa', 'versicolor', 'virginica'))","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f8365401630>"},"exec_count":17,"output_type":"execute_result"},"1":{"data":{"image/png":"cade6f53d9bbb935e8a11f4a81e6846b93b36f63","text/plain":"<Figure size 720x576 with 1 Axes>"},"exec_count":17,"metadata":{"image/png":{"height":494,"width":592},"needs_background":"light"},"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"aa49de","input":"# First, we have to decide how many subplots we want and how they are orientated\n# say we want them side by side (i.e. 1 row 2 columns)\n\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, figsize=(15,8))\n\n# this will create a figure object (which is the whole plot area)\n# and 2 axes (which are the 2 subplots labeled ax0 and ax1)\n\n# Now we can put plots in them accordingly\n\n### for ax0 ###\n\nax0.hist(df_setosa['SepalLengthCm'], color='r', alpha=.5) \nax0.hist(df_versicolor['SepalLengthCm'], color='g', alpha=.5)\nax0.hist(df_virginica['SepalLengthCm'], color='b', alpha=.5)\n\nax0.set_xlabel('Sepal Length (cm)')\nax0.set_title('Histrogram of Sepal Length for Different Iris')\n\nax0.legend(('setosa', 'versicolor', 'virginica'))\n\n### for ax1 ###\n\nax1.hist(df_setosa['SepalWidthCm'], color='r', alpha=.5) \nax1.hist(df_versicolor['SepalWidthCm'], color='g', alpha=.5)\nax1.hist(df_virginica['SepalWidthCm'], color='b', alpha=.5)\n\nax1.set_xlabel('Sepal Width (cm)')\nax1.set_title('Histrogram of Sepal Width for Different Iris')\n\nax1.legend(('setosa', 'versicolor', 'virginica'))\n\nplt.show() # after building what we want for both axes, use show() method to show plots","output":{"0":{"data":{"image/png":"2dbb24cc9111533d538bb7658a02e604e6fc92f2","text/plain":"<Figure size 1080x576 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":494,"width":876},"needs_background":"light"},"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"320d73","input":"%matplotlib inline\n# this is for ipython interpriter to show the plot in jupyter notebook\n\nimport pandas as pd\nimport matplotlib.pyplot as plt","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"8ed63e","input":"df = pd.read_csv('../data/Iris/Iris.csv', index_col=0)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"5b1947","input":"df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SepalLengthCm</th>\n      <th>SepalWidthCm</th>\n      <th>PetalLengthCm</th>\n      <th>PetalWidthCm</th>\n      <th>Species</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>5.1</td>\n      <td>3.5</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.9</td>\n      <td>3.0</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.7</td>\n      <td>3.2</td>\n      <td>1.3</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.6</td>\n      <td>3.1</td>\n      <td>1.5</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.0</td>\n      <td>3.6</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>Iris-setosa</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\nId                                                                       \n1             5.1           3.5            1.4           0.2  Iris-setosa\n2             4.9           3.0            1.4           0.2  Iris-setosa\n3             4.7           3.2            1.3           0.2  Iris-setosa\n4             4.6           3.1            1.5           0.2  Iris-setosa\n5             5.0           3.6            1.4           0.2  Iris-setosa"},"exec_count":5,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"b0dced","input":"df.plot(kind='box')","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f8367e95550>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"a53011625398663c045ffc2747a235db2a8eb5d2","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":248,"width":362},"needs_background":"light"},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d73151","input":"df.plot(kind='box', figsize=(10,8), title='Box plot of different measurements of iris', legend=True)","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f83656f56d8>"},"exec_count":7,"output_type":"execute_result"},"1":{"data":{"image/png":"f401981e2c7085d543eba2b7b676fb00512580e5","text/plain":"<Figure size 720x576 with 1 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":481,"width":585},"needs_background":"light"},"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"630440","input":"df.plot(kind='box',\n        subplots=True, layout=(2,2),\n        figsize=(10,8), title='Box plot of different measurements of iris', legend=True)","output":{"0":{"data":{"text/plain":"SepalLengthCm       AxesSubplot(0.125,0.536818;0.352273x0.343182)\nSepalWidthCm     AxesSubplot(0.547727,0.536818;0.352273x0.343182)\nPetalLengthCm          AxesSubplot(0.125,0.125;0.352273x0.343182)\nPetalWidthCm        AxesSubplot(0.547727,0.125;0.352273x0.343182)\ndtype: object"},"exec_count":8,"output_type":"execute_result"},"1":{"data":{"image/png":"8687eac1f89ea3b306f289d13e5e118d58a0bf71","text/plain":"<Figure size 720x576 with 4 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":523,"width":595},"needs_background":"light"},"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"7a83e9","input":"df_pivot = df.pivot(index=None, columns='Species', values='SepalLengthCm')\n# tell the pivot() method to make the 'Species' as columns, and using the 'SepalLengthCm' as the value","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"01460b","input":"### Divide the data into 3 types accordingly","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"0d9635","input":"#### Better presentation: figure size, add title and legend","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"16a483","input":"### Scatter plot example: plot on Sepal Length and Width","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"24c1d5","input":"#### Addtional exercise\n\nChallenge yourself by making your own `df_pivot` pivoting on a different messure (e.g. Petal Width). Also try usng a histogram (hist) instead of a boxplot. You can also try making a plot with 3 subplots, each is a histrogram of a type of iris.","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"25616d","input":"### Histogram example: plot on Sepal Length","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"4a5f00","input":"####  Prepare the data set","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"533bf2","input":"### Exercise: Compare sepal length of different iris\n\nLet's use box plot to compare the sepal length of different iris. We need the DataFrame to be slightly different so we can compare the different type iris. We would like to pivot the data so each column are sepal length of different iris.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"6671f6","input":"### Import pyplot in Matplotlib (and pandas)\n\nAccordation to the official documentation:\n\n`matplotlib.pyplot` is a collection of command style functions that make Matplotlib work like MATLAB. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc.\n\n`pyplot` is mainly intended for interactive plots and simple cases of programmatic plot generation.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"6686c6","input":"#### Box plot of df_pivot\n\nNow we can use `plot()` on `df_pivot`. To make a box plot, remember to set the parameter `kind` to 'box'. Also make the presentation nice by setting a good `figsize` and with a good `title`. Don't forget the `legend`","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"67183f","input":"#### Making subplots","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"67cc49","input":"### Using DataFrame.plot() in pandas\n\npandas DataFrame object has a `plot()` method which provide basic plot of different kinds, including: 'line', 'bar', 'hist', 'box' etc. You can also set parameters to control the layout and labels of the plot.\n\n`plot()` uses `matplotlib.pyplot` in the background which makes plotting data in a DataFrame much easier \n\nYou will find this page very helpful:\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"75c6c9","input":"#### Example: Box plot in general","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"7a988e","input":"### Refresh our memory about how the data looks like","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"8f2ef0","input":"### Making subplots example\n\nTo make subplots with just `plt` is a bit more complicated. It is considered more advance and require some understanding of what the building blocks are in a plot. Don't feel bad if you find it challenging, you can always follow the example and try it yourself to understand more what is going on.\n\nThe example below plot the histrogram of Sepal Length and Sepal Width side by side","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"9a4400","input":"#### Better presentation: figure size, add labels and legend","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"9f37b0","input":"### Scatter plot exercise: plot on Petal Length and Width\n\nNow is your turn to make your own plot. Make sure you have also set the labels and legend","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"b32ecb","input":"### Histrogram exercise: plot on Petal Width\n\nNow is your turn to make your own plot. Make sure you set the alpha to a proper value and have the right the labels and legend.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"cfd97a","input":"### Import the dataframe again, read it into a Panda's DataFrame and assign it to df.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"d3bb2a","input":"So far we are not using `matplotlib.pyplot` directly. Although it is very convinent to use `df.plot()`, sometimes we would like to have more control with what we are plotting and make more complex graphs. In the following sections, we will use `matplotlib.pyplot` (which is imported as `plt` now) directly","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"d9160f","input":"### Making subplots exercise\n\nMake 2 subplots, one on top of another. They are scatter plots of Petal Length and Petal Width (with different type of iris). After you have done it, try also other orientation and plots. See if you can make 4 subplots together. Always make sure the presentation is good.","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"e6e26b","input":"#### Note on advance material\n\nCheck out more example of histogram with multiple data sets: https://matplotlib.org/gallery/statistics/histogram_multihist.html#sphx-glr-gallery-statistics-histogram-multihist-py\n\nExample: Creates histogram from scatter plot and adds them to the sides of the plot\nhttps://matplotlib.org/gallery/lines_bars_and_markers/scatter_hist.html#sphx-glr-gallery-lines-bars-and-markers-scatter-hist-py\n\nThere are a lot more to learn about matplotlib. It is a very powerful library. You can always learn more by looking at the examples at: https://matplotlib.org/gallery/index.html\n\nAlso, if you are stucked, always check the documentation: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot","pos":41,"type":"cell"}
{"id":0,"time":1588790484223,"type":"user"}
{"last_load":1588790484718,"type":"file"}