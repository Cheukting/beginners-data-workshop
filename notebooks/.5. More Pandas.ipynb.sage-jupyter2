{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":84455424},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1588976911067,"id":"486420","input":"df.head()","kernel":"python3","pos":64,"start":1588976911055,"state":"done","type":"cell"}
{"cell_type":"code","end":1588984426575,"id":"9e9b43","input":"# %load ../solutions/05_35.py","kernel":"python3","pos":113,"start":1588984426568,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0c0b4d","input":"","pos":50,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"171ddc","input":"","pos":27,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"21adcc","input":"","pos":45,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"31a3bc","input":"","pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"356156","input":"","pos":75,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3ba098","input":"","pos":62,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"42fa57","input":"","pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"888815","input":"","pos":81,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"894288","input":"df['country'].value_counts()","pos":86,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a46e0d","input":"df['country'].value_counts()","pos":90,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ae540b","input":"","pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b64c24","input":"","pos":102,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c746f7","input":"","pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d06933","input":"","pos":72,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d6440e","input":"","pos":116,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d778bc","input":"","pos":79,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e9b2ff","input":"","pos":77,"state":"done","type":"cell"}
{"cell_type":"code","id":"059011","input":"# %load ../solutions/05_04.py","kernel":"python3","pos":15,"state":"done","type":"cell"}
{"cell_type":"code","id":"0b2b22","input":"","pos":41,"state":"done","type":"cell"}
{"cell_type":"code","id":"134b28","input":"# %load ../solutions/05_36.py","kernel":"python3","pos":117,"state":"done","type":"cell"}
{"cell_type":"code","id":"16da5a","input":"# %load ../solutions/05_02.py","kernel":"python3","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","id":"238706","input":"","pos":7,"state":"done","type":"cell"}
{"cell_type":"code","id":"2c3289","input":"# %load ../solutions/05_21.py","pos":73,"state":"done","type":"cell"}
{"cell_type":"code","id":"31acce","input":"dict_countries = {'BG':'Bulgaria', 'CZ':'Czech Republic', 'IT':'Italy', 'GR':'Greece', 'SI':'Slovenia', 'UK':'United Kingdom'}\ndf.loc[df['country'].isin(dict_countries.keys()), 'country'] = ","pos":88,"state":"done","type":"cell"}
{"cell_type":"code","id":"38ddfb","input":"# %load ../solutions/05_28.py","kernel":"python3","pos":93,"state":"done","type":"cell"}
{"cell_type":"code","id":"3ad69c","input":"# %load ../solutions/05_18.py","kernel":"python3","pos":63,"state":"done","type":"cell"}
{"cell_type":"code","id":"3b8b5a","input":"","pos":20,"state":"done","type":"cell"}
{"cell_type":"code","id":"4643f9","input":"# %load ../solutions/05_09.py","kernel":"python3","pos":31,"state":"done","type":"cell"}
{"cell_type":"code","id":"4689c8","input":"# %load ../solutions/05_08.py","kernel":"python3","pos":28,"state":"done","type":"cell"}
{"cell_type":"code","id":"47dc7c","input":"","pos":92,"state":"done","type":"cell"}
{"cell_type":"code","id":"4ea431","input":"# %load ../solutions/05_14.py","kernel":"python3","pos":51,"state":"done","type":"cell"}
{"cell_type":"code","id":"5066cc","input":"","kernel":"python3","pos":108,"state":"done","type":"cell"}
{"cell_type":"code","id":"5964ac","input":"# %load ../solutions/05_12.py","kernel":"python3","pos":42,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","id":"5eeb10","input":"# %load ../solutions/05_13.py","kernel":"python3","pos":46,"state":"done","type":"cell"}
{"cell_type":"code","id":"6162a1","input":"","kernel":"python3","pos":33,"state":"done","type":"cell"}
{"cell_type":"code","id":"78fb8a","input":"","pos":17,"state":"done","type":"cell"}
{"cell_type":"code","id":"7c6e20","input":"","pos":14,"state":"done","type":"cell"}
{"cell_type":"code","id":"7fc61a","input":"# %load ../solutions/05_01.py","kernel":"python3","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","id":"7ff315","input":"# %load ../solutions/05_26.py","pos":89,"state":"done","type":"cell"}
{"cell_type":"code","id":"8c7193","input":"df.head()","kernel":"python3","pos":47,"state":"done","type":"cell"}
{"cell_type":"code","id":"9125ea","input":"# %load ../solutions/05_24.py","pos":80,"state":"done","type":"cell"}
{"cell_type":"code","id":"a5d788","input":"","kernel":"python3","pos":66,"state":"done","type":"cell"}
{"cell_type":"code","id":"a956b2","input":"","pos":10,"state":"done","type":"cell"}
{"cell_type":"code","id":"ac722a","input":"# %load ../solutions/05_.py","kernel":"python3","pos":18,"state":"done","type":"cell"}
{"cell_type":"code","id":"b37c5b","input":"# %load ../solutions/05_20.py","pos":70,"state":"done","type":"cell"}
{"cell_type":"code","id":"b44768","input":"","kernel":"python3","pos":112,"state":"done","type":"cell"}
{"cell_type":"code","id":"b69dcd","input":"# %load ../solutions/05_25.py","pos":82,"state":"done","type":"cell"}
{"cell_type":"code","id":"b6c278","input":"# %load ../solutions/05_07.py","kernel":"python3","pos":25,"state":"done","type":"cell"}
{"cell_type":"code","id":"b8bd8c","input":"# %load ../solutions/05_30.py","kernel":"python3","pos":100,"state":"done","type":"cell"}
{"cell_type":"code","id":"b8cad3","input":"# %load ../solutions/05_11.py","kernel":"python3","pos":38,"state":"done","type":"cell"}
{"cell_type":"code","id":"bba007","input":"# %load ../solutions/05_10.py","kernel":"python3","pos":34,"state":"done","type":"cell"}
{"cell_type":"code","id":"c3775f","input":"# %load ../solutions/05_31.py","kernel":"python3","pos":103,"state":"done","type":"cell"}
{"cell_type":"code","id":"cbd031","input":"# %load ../solutions/05_03.py","kernel":"python3","pos":11,"state":"done","type":"cell"}
{"cell_type":"code","id":"d267cd","input":"# %load ../solutions/05_23.py","pos":78,"state":"done","type":"cell"}
{"cell_type":"code","id":"d95181","input":"# %load ../solutions/05_15.py","kernel":"python3","pos":54,"state":"done","type":"cell"}
{"cell_type":"code","id":"d9e9c0","input":"# %load ../solutions/05_16.py","kernel":"python3","pos":57,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","id":"e087fb","input":"# %load ../solutions/05_17.py","kernel":"python3","pos":60,"state":"done","type":"cell"}
{"cell_type":"code","id":"e0b55f","input":"# %load ../solutions/05_19.py","kernel":"python3","pos":67,"state":"done","type":"cell"}
{"cell_type":"code","id":"e45f86","input":"# %load ../solutions/05_33.py","kernel":"python3","pos":109,"state":"done","type":"cell"}
{"cell_type":"code","id":"e6184a","input":"# %load ../solutions/05_22.py","pos":76,"state":"done","type":"cell"}
{"cell_type":"code","id":"ef41a8","input":"# %load ../solutions/05_06.py","kernel":"python3","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"52fdb3","input":">Get the mean number of ***Attendees*** for the grouped data.","pos":119,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"6c154a","input":">Sort df by ascending ***duration*** and descending number of ***Attendees***.","pos":111,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"a992b5","input":">Group by ***city***.","pos":115,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"cc6236","input":">Create a ***duration*** column with the duration of the training.","pos":104,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0175e3","input":">Apply this function to the ***Attendees*** column.","pos":91.75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"05f7da","input":">Check the dtype of the ***DateFrom***.","pos":95,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1972de","input":"We saw that some countries were filled with their contry code, and others with thei name. We are going to move everything to the same format.  \nWe can do that by mapping a dictionary to a column. It will then replace the ***key*** with the corresponding ***value***.  \n>Complete the code below to replace the country codes with the country name.  \n>Note that we use a mask as we want to replace only certain values of the series.","pos":87,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1db4fe","input":">Get the help for the drop method (if you prefer, you can search for the documentation on internet)","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"217737","input":">Show the information relative to df's columns","pos":36,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"245dd1","input":">Have a look at the first rows of df_2014. Looks better, isn't it?","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2c7f8e","input":">Drop the Location column\n","pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2d0249","input":"## Date time","pos":94,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"31ab07","input":">Display the unique values of the Location column","pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"32f9ee","input":">Load the data for the years 2015 and 2016 and assign them to df_2015 and df_2016 (don't forget the parameter!)","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"35f3cc","input":"## Concatenate\nPandas have a good page with documentation about merge, join and concatenation: https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"38f825","input":">check the shape of df","pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"41d4f5","input":"Note: We could have used the parameter *parse_dates* when loading data.  \nWe can now use these columns to filter or do some calculation.\n>Display the rows where the training started after the first February 2017.","pos":101,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4cfe42","input":"You can see that the cities and contries are separated with a semi-column (even if some are missing). We are going to split the *Location* column into two.\n>Try splitting the ***Location*** column on the semi-column.","pos":52,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4f818f","input":">Load the data of the year 2104 using the header paramater and assign it to df_2014 (it will be overwritten)","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"568db7","input":">Drop the last two columns of df  \n>labels: provide a list with the column's names  \nDon't forget the axis!","pos":44,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"57ad5d","input":">Import pandas (with the mostly used convension seen in notebook 2).  \n>Import datetime.  \n>Import matplotlib (as shown in notebook 3.1).  \n>Add the magic comand to show the plot in jupyter notebook.","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5c7122","input":">Get the count of unique values in the ***country*** column.","pos":65,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"60d478","input":"This return a lsit with the items which were before and after the semi-column.  \n>Try again to split again the ***Location*** column, but expand expand the results this time.","pos":55,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6621fe","input":"***DateFrom*** and ***DateTo*** are objects.  \n>Convert these two columns to ***datetime*** format.","pos":98,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6f6820","input":"   >Check again the number of unique values in the country column","pos":74,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7db9ac","input":"## Strings","pos":48,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7df9e5","input":"We can see that there was a couple of issues with dates data entry...","pos":113.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"82f45a","input":">Look at the indices of df","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"854809","input":">Sort df in alphabetical order of ***cities***.","pos":110.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"91f5ff","input":"## Dropping columns","pos":35,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9669e1","input":">Using the documentation, concatenate the 3 dataframe into one, named df","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9a11f5","input":"## Apply","pos":90.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a3e1c4","input":"> Reset the index to have it start at 0 and continue with a step of 1 until the end.","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a65464","input":"## Sorting values","pos":110,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a95a10","input":">Load the data of the year 2104 and assign it to df_2014 (path: '../data/food_training/training_2014.csv')","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"aab2a6","input":"You can see that the default value for *axis* is *0*. When it is the case, the method will look at the rows (i.e. *axis 0*) of the dataframe.  \nIn our case, we want to drop columns (i.e. *axis 1*).","pos":43,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"adc852","input":">Have a look at the first rows of df_2014","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"aec8f3","input":"We can see that the last two columns are completely empty, so we will drop them.","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b408ea","input":"## Group By","pos":114,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"caed2e","input":">Write a function that returns ***single*** if the value passed is 1, and ***multiple*** otherwise.","pos":91,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d2bfd8","input":"## Map","pos":85,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d30716","input":">Have a look at the rows where the ***city*** contains ***/***","pos":80.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d45ab7","input":">Use the strip method to remove the (potential) extra spaces at the beginning and the end of the cities and countries","pos":71,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"da15f9","input":">Have a look at the rows where the ***country*** is Portugal.  \nWhat do you notice?","pos":76.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"da75ca","input":"# More Pandas","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dd3d1b","input":">Check the count of each unique values in the ***country*** column.","pos":68,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"df71e0","input":"In this notebook, we are going to use data provided by the UK government.  \nhttps://data.gov.uk/dataset/a59198d9-2e24-4816-be1b-c3a1efa02dda/better-training-for-safer-food    \n  \nIt is provided under the Open Government Licence that you can find here: http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e8b04d","input":"***Note***: this notebook contains cell with ***a*** solution. Remember ther is not only one soltuion to a problem!  \nYou will recognise these cells as they start with **# %**.  \nIf you would like to see the soltion, you will have to remove the **#** (which can be done by using **Ctrl** and **?**) and run the cell. If you want to run the solution code, you will have to run the cell again.","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f0ec72","input":">Create a ***month*** column indicating which month the training started.  \n>Plot an histogram of the ***month*** column.","pos":107,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f17007","input":">Create a ***city*** and a ***country*** columns using this split.","pos":58,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f58b7c","input":"You can see that the header are not at the right place.  \nIf you have a look at the documentation, you will see that the *header* parameter of the read_csv method is set to *infer*. It will usually infer the header using the first row (which has the index *0*).","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f6c9b4","input":">Put the ***city*** column into lower case (don't forget to reafect it to the **city** column).","pos":78.5,"state":"done","type":"cell"}
{"end":1588984327080,"id":"03f961","input":"# %load ../solutions/05_34.py","kernel":"python3","pos":110.75,"start":1588984327069,"state":"done","type":"cell"}
{"id":"012538","input":"","pos":53,"state":"done","type":"cell"}
{"id":"0d4226","input":"","pos":120,"state":"done","type":"cell"}
{"id":"0e23aa","input":"# %load ../solutions/05_29.py","kernel":"python3","pos":97,"state":"done","type":"cell"}
{"id":"11604b","input":"","pos":96,"state":"done","type":"cell"}
{"id":"2f9bf7","input":"","kernel":"python3","pos":105,"state":"done","type":"cell"}
{"id":"5300b0","input":"","pos":48.5,"state":"done","type":"cell"}
{"id":"56bdb6","input":"","pos":121.5,"state":"done","type":"cell"}
{"id":"583596","input":"","pos":110.625,"state":"done","type":"cell"}
{"id":"5eab25","input":"","pos":48.125,"state":"done","type":"cell"}
{"id":"836067","input":"","pos":91.25,"state":"done","type":"cell"}
{"id":"9230bd","input":"","pos":99,"state":"done","type":"cell"}
{"id":"93c58f","input":"# %load ../solutions/05_37.py","kernel":"python3","pos":121,"state":"done","type":"cell"}
{"id":"a920d8","input":"","pos":69,"state":"done","type":"cell"}
{"id":"bacabb","input":"","pos":56,"state":"done","type":"cell"}
{"id":"c039ff","input":"# %load ../solutions/05_32.py","kernel":"python3","pos":106,"state":"done","type":"cell"}
{"id":"c06a66","input":"","pos":121.875,"state":"done","type":"cell"}
{"id":"c387a7","input":"!!! BLABLA .str","pos":48.25,"state":"done","type":"cell"}
{"id":"d00af6","input":"","pos":121.75,"state":"done","type":"cell"}
{"id":"de26fd","input":"","pos":59,"state":"done","type":"cell"}
{"id":"f43125","input":"","pos":122,"state":"done","type":"cell"}
{"id":"ff53a0","input":"# %load ../solutions/05_27.py","kernel":"python3","pos":91.5,"state":"done","type":"cell"}
{"id":0,"time":1588987158465,"type":"user"}
{"last_load":1588976621346,"type":"file"}