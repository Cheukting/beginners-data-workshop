{"backend_state":"running","kernel":"anaconda2019","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":77651968},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"9474a7","input":"","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"94158d","input":"import pandas as pd\n\npokemon_df = pd.read_csv('../data/Pokemon/pokemon.csv', index_col=0)\npokemon_df.head(10)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Type 1</th>\n      <th>Type 2</th>\n      <th>Total</th>\n      <th>HP</th>\n      <th>Attack</th>\n      <th>Defense</th>\n      <th>Sp. Atk</th>\n      <th>Sp. Def</th>\n      <th>Speed</th>\n      <th>Generation</th>\n      <th>Legendary</th>\n    </tr>\n    <tr>\n      <th>#</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Bulbasaur</td>\n      <td>Grass</td>\n      <td>Poison</td>\n      <td>318</td>\n      <td>45</td>\n      <td>49</td>\n      <td>49</td>\n      <td>65</td>\n      <td>65</td>\n      <td>45</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Ivysaur</td>\n      <td>Grass</td>\n      <td>Poison</td>\n      <td>405</td>\n      <td>60</td>\n      <td>62</td>\n      <td>63</td>\n      <td>80</td>\n      <td>80</td>\n      <td>60</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Venusaur</td>\n      <td>Grass</td>\n      <td>Poison</td>\n      <td>525</td>\n      <td>80</td>\n      <td>82</td>\n      <td>83</td>\n      <td>100</td>\n      <td>100</td>\n      <td>80</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>VenusaurMega Venusaur</td>\n      <td>Grass</td>\n      <td>Poison</td>\n      <td>625</td>\n      <td>80</td>\n      <td>100</td>\n      <td>123</td>\n      <td>122</td>\n      <td>120</td>\n      <td>80</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Charmander</td>\n      <td>Fire</td>\n      <td>NaN</td>\n      <td>309</td>\n      <td>39</td>\n      <td>52</td>\n      <td>43</td>\n      <td>60</td>\n      <td>50</td>\n      <td>65</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Charmeleon</td>\n      <td>Fire</td>\n      <td>NaN</td>\n      <td>405</td>\n      <td>58</td>\n      <td>64</td>\n      <td>58</td>\n      <td>80</td>\n      <td>65</td>\n      <td>80</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Charizard</td>\n      <td>Fire</td>\n      <td>Flying</td>\n      <td>534</td>\n      <td>78</td>\n      <td>84</td>\n      <td>78</td>\n      <td>109</td>\n      <td>85</td>\n      <td>100</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CharizardMega Charizard X</td>\n      <td>Fire</td>\n      <td>Dragon</td>\n      <td>634</td>\n      <td>78</td>\n      <td>130</td>\n      <td>111</td>\n      <td>130</td>\n      <td>85</td>\n      <td>100</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CharizardMega Charizard Y</td>\n      <td>Fire</td>\n      <td>Flying</td>\n      <td>634</td>\n      <td>78</td>\n      <td>104</td>\n      <td>78</td>\n      <td>159</td>\n      <td>115</td>\n      <td>100</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Squirtle</td>\n      <td>Water</td>\n      <td>NaN</td>\n      <td>314</td>\n      <td>44</td>\n      <td>48</td>\n      <td>65</td>\n      <td>50</td>\n      <td>64</td>\n      <td>43</td>\n      <td>1</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                        Name Type 1  Type 2  Total  HP  Attack  Defense  \\\n#                                                                         \n1                  Bulbasaur  Grass  Poison    318  45      49       49   \n2                    Ivysaur  Grass  Poison    405  60      62       63   \n3                   Venusaur  Grass  Poison    525  80      82       83   \n3      VenusaurMega Venusaur  Grass  Poison    625  80     100      123   \n4                 Charmander   Fire     NaN    309  39      52       43   \n5                 Charmeleon   Fire     NaN    405  58      64       58   \n6                  Charizard   Fire  Flying    534  78      84       78   \n6  CharizardMega Charizard X   Fire  Dragon    634  78     130      111   \n6  CharizardMega Charizard Y   Fire  Flying    634  78     104       78   \n7                   Squirtle  Water     NaN    314  44      48       65   \n\n   Sp. Atk  Sp. Def  Speed  Generation  Legendary  \n#                                                  \n1       65       65     45           1      False  \n2       80       80     60           1      False  \n3      100      100     80           1      False  \n3      122      120     80           1      False  \n4       60       50     65           1      False  \n5       80       65     80           1      False  \n6      109       85    100           1      False  \n6      130       85    100           1      False  \n6      159      115    100           1      False  \n7       50       64     43           1      False  "},"exec_count":1,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"f5f6dd","input":"g = sns.FacetGrid(pokemon_df, col=\"Generation\")","output":{"0":{"data":{"image/png":"f328d2f017c1dd979a4d0eb98a0b03504a9e55e7","text/plain":"<Figure size 1296x216 with 6 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":208,"width":1285},"needs_background":"light"},"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"427a6f","input":"g = sns.FacetGrid(pokemon_df, row=\"Generation\", aspect=3.5)\ng.map(sns.countplot, \"Type 1\");","output":{"0":{"name":"stderr","output_type":"stream","text":"/ext/anaconda-2019.03/lib/python3.7/site-packages/seaborn/axisgrid.py:728: UserWarning: Using the countplot function without specifying `order` is likely to produce an incorrect plot.\n  warnings.warn(warning)\n"},"1":{"data":{"image/png":"e6fe44437fcaeaeb0a22cd98ae2d418bacf2bbbc","text/plain":"<Figure size 756x1296 with 6 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":1287,"width":748},"needs_background":"light"},"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"cc1d07","input":"sns.catplot(x=\"Type 1\", y=\"Attack\", data=pokemon_df, aspect=2.5, kind=\"swarm\", hue=\"Legendary\")","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f676873abd0>"},"exec_count":12,"output_type":"execute_result"},"1":{"data":{"image/png":"05ee9763776d3ffcd24e245f7cd58354540151d4","text/plain":"<Figure size 961.25x360 with 1 Axes>"},"exec_count":12,"metadata":{"image/png":{"height":351,"width":956},"needs_background":"light"},"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"b80829","input":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.catplot(x=\"Type 1\", y=\"Attack\", data=pokemon_df)","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f676f5dc190>"},"exec_count":2,"output_type":"execute_result"},"1":{"data":{"image/png":"0115f927b848804f51dae36f6adf66af20c91413","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":351,"width":352},"needs_background":"light"},"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"2b201b","input":"sns.catplot(x=\"Type 1\", y=\"Attack\", data=pokemon_df)","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f676f5dc2d0>"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"image/png":"49628bffeb12d06d78e08a841163f8f85eac44d7","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":3,"metadata":{"image/png":{"height":351,"width":352},"needs_background":"light"},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"659636","input":"sns.catplot(x=\"Type 1\", y=\"Attack\", data=pokemon_df, aspect=2.5)","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f676b18dad0>"},"exec_count":4,"output_type":"execute_result"},"1":{"data":{"image/png":"29e95dfb65d782bd2da8d3e04cc0d1bd3ee85d16","text/plain":"<Figure size 900x360 with 1 Axes>"},"exec_count":4,"metadata":{"image/png":{"height":351,"width":892},"needs_background":"light"},"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"761afe","input":"sns.catplot(x=\"Type 1\", y=\"Attack\", data=pokemon_df, aspect=2.5)","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f676b0d3fd0>"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"image/png":"f93744d0d887a4a96abde1e957a26f4acb6a8488","text/plain":"<Figure size 900x360 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":351,"width":892},"needs_background":"light"},"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"403108","input":"sns.catplot(x=\"Type 1\", y=\"Attack\", data=pokemon_df)","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f676958fe10>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"720f7891b1fd2b7567d024ca494846f2df69fcc6","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":351,"width":352},"needs_background":"light"},"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b1343c","input":"sns.catplot(x=\"Type 1\", y=\"Attack\", data=pokemon_df, aspect=2.5, kind=\"swarm\")","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f676959f350>"},"exec_count":7,"output_type":"execute_result"},"1":{"data":{"image/png":"3dae5cdd43868a9b7f3ec17f7444365c635a6a7e","text/plain":"<Figure size 900x360 with 1 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":351,"width":892},"needs_background":"light"},"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"e144e5","input":"g = sns.FacetGrid(pokemon_df, col=\"Generation\")","output":{"0":{"data":{"image/png":"f328d2f017c1dd979a4d0eb98a0b03504a9e55e7","text/plain":"<Figure size 1296x216 with 6 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":208,"width":1285},"needs_background":"light"},"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"90b7ef","input":"pokemon_df[\"Generation\"].unique()","output":{"0":{"data":{"text/plain":"array([1, 2, 3, 4, 5, 6])"},"exec_count":9,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"13e057","input":"So you can see that by adding 'aspect' we make the plot wider. The width of the plot is equal to 'aspect * height' so by adding 'aspect' we increase the width of the plot. It is one of the configaration we can add to the plot. For the whole list and their details, we can refer to the [official documentation](https://seaborn.pydata.org/generated/seaborn.catplot.html#seaborn.catplot) but we will give an introcduction to a few common ones.","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"1d622b","input":"However, we would like to look deeper: I have a theory that Legernday pokemons are more powerful. let's colour code according to 'Legernday' to see if the pokemon is Legernday or not will have something to do with the Attack of the pokemon:","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"1fae01","input":"But with sns.catplot that we used before, this are even simplier. As catplot is already a FacetGrid , we can directly add the `row` or `col` setting to it.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"22fafd","input":"**Try: swap `x` and `y`,  and add `height=12, aspect=0.6, kind=\"swarm\"` in the arguments of the following `sns.catplot`**","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"2f437d","input":"There are a few thing we can observe so far:\n\n1. For some Types, like Psychic has a very large range of Attack with a long tail the end (i.e. some Physic Types has very high Attack power while most of the Psychic type does not).\n\n2. On the other hand, the Poison type are mostly in the range of 40-110 Attacks.\n\n3. In general Dragon Types have more Attack power than Fairy, but there are 2 Fairy type that has more attack power.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"355c6f","input":"When import, we usually simplify 'seaborn' as 'sns'. Note that we have to also have to import matpoltlib.pyplot becuase seaborn is a library that sit on top of matplotlib. We got a plot but it looks ugly and not readable, let's add some configuration to make it nicer.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"466ce2","input":"Sometimes, we would have multiple plots in one graph for comparison. One way to do it in seaborn is to use FacetGrid. The FacetGrid class is useful when you want to visualize the distribution of a variable or the relationship between multiple variables separately within subsets of your dataset. In the following, we will be using FacetGrid to see if there is a difference for our analysis above across different Generations.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"51fb3a","input":"Here we can do it by setting 'kind' to 'swarm' so the points are not overlapping. The disadvantage is that this ploy will need more space horizontally. Imagin we don't want to make the plot super wide due to the limitation of the paper. We can turn it 90 degrees by fliping the x and the y,also we would adjust the aspect and the height:","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"552349","input":"**Try: adding `aspect=2.5` as the last arguments in the following `sns.catplot`**","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"63bd88","input":"For example, here we see that there's a random x-axis offset for all the points so we can see them without dots overlaping each other. This is done by the 'jitter' setting which is default to True. Let's turn it off and see how it looks like:","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"6c5d54","input":"So we now have a plot that points are align acording to their catagories without the x-axis offsets. Which one to use is depending on if the population of the value (e.g. Attack) is important. In our case, we want to know how the Attack is distributed in each Type so many be it's good to have 'jitter' on, or even better if we can spread it out even more and show the distribution:","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"7e26c4","input":"**Try: adding `jitter=False` as the last arguments in the following `sns.catplot`**","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"81e103","input":"Ok, now we have the layout, how we gonna to put the plot in? For some plots, it could be done with the [FacetGrid.map()](https://seaborn.pydata.org/generated/seaborn.FacetGrid.map.html#seaborn.FacetGrid.map) method, for example, using sns.countplot to count how many pokemons in different types:","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"883e5b","input":"**Try: adding `hue=\"Legendary\"` as the last arguments in the following `sns.catplot`**","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"8b2596","input":"## About seaborn\nSeaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics, which is very powerful for visulising catagorical data. We will be using the [Pokemon.csv](https://gist.github.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6)","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"8bb684","input":"Look we have 6 plot areas which match as the number of different of Generations that we have\n(we can check what are the different Generations like this):","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"8ef619","input":"Ah ha! We see that a lot of the Psychic Type that has higher that others in Attack is actually Legendary pokemon. That also happen to the Ground Type and the Flying type.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"93dfae","input":"**Try: adding `row=\"Generation\"` as the last arguments in the following `sns.catplot`**","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"96661b","input":"# Building structured multi-plot grids","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"997b4d","input":"Now you see that in each generation, the Legindary pokemons are outliers with super attack powers comparing with the others within their own generation. For details using FacetGrids, you can see the official documentaiton here: https://seaborn.pydata.org/tutorial/axis_grids.html","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"a0bf3a","input":"### Exercise\nNow it's your turn to do some analysis. Pick a property of the pokemons: HP, Defense, Sp. Atk, Sp. Def or Speed and do the similar analysis as above to see if you can find any interesting facts about pokemons.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"a25627","input":"However, we would like to have the plots align vertically rather than horizontally.","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"c22a9c","input":"Let's have a look at the data:","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"c74d54","input":"## Categorical scatterplots\n\nFor example, we want to compare the Attack of different type of pokemons, to see if any type is generally more powerful than the others:","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"d3510b","input":"To make a FacetGrid, we can do the following:","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"dd10db","input":"**Try: adding `kind=\"swarm\"` as the last arguments in the following `sns.catplot`**","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"f0d170","input":"**Try: replace `col` with `row` in the following `sns.FacetGrid`**","pos":31,"type":"cell"}
{"id":0,"time":1588790001597,"type":"user"}
{"last_load":1588790002236,"type":"file"}